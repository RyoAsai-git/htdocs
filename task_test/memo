laravel 

php artisan serve 
http:127.0.0.1:8000


タイムゾーン設定 言語設定
config/app.php
'timezone' => 'Asia/Tokyo';
'locale' => 'ja';


DB文字コード設定
config/database.php
'charset' => 'utf8';
'collation' => 'utf8_unicode_ci'


デバックバーのインストール
composer require barryvdh/laravel-debugbar
php artisan serveで確認
.envのDEBUGで切り替える
laravel デバッガー常時起動状態になっている
.envファイルでAPP_DEBUG=true をAPP_DEBUG=falseに変更で消える

デバッガーをtrueに変更しても表示されない場合はキャッシュとコンフィグをクリアすると良い
php artisan cache:clear
php artisan config:clear


データベース設定
.envのここを変更
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

phpMyAdminでデータベースを作成し、privilegesでユーザーを作成する ユーザー名、パスワード設定
DB_DATABASEにデータベース名
DB_USERNAMEにprivilegesで作成したユーザー名
DB_PASSWORDにprivilegesで作成したユーザーのパスワード

接続確認方法
laravelにはインストール時にデータベース内のテーブルを作る機能がある
php artisan migrate
エラー発生

.env こちらへ変更
DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=laravel_task
DB_USERNAME=laravel_user
DB_PASSWORD=password123

privilegesで作成したユーザーのホスト名を%からlocalhostへ変更
.env DB_HOST=127.0.0.1をDB_HOST=localhostへ変更
config/database.phpの'unix_socket' => 'env('DB_SOCKET', '')', を 'unix_socket' => '/Applications/MAMP/tmp/mysql/mysql.sock',へ変更
エラー解決
laravelとデータベースの接続完了


laravel ルート ビュー
laravel
ルーティング
コントローラー
モデル <-> データベース
ビュー

laravelのトップページ(welcome)はクライアントからのリクエストにルーティングー>ビューと表示している
今回はコントローラーを経由していない


Artisan(職人)
php artisan list コマンド一覧

よく使う？
make:migration
make:model
make:controller

コマンドを拡張して自分で作ることもできる


laravel モデル
データベースとのやりとりをphpで記述できるメリット 
Eloquentという名称
ORM ORマッパーという機能
Object-Relational Mapping オブジェクト関係マッピング

モデル作成
php artisan make:model Test
//appフォルダの直下にあるため modelが増えるほど見づらくなってしまう
//Modelsのフォルダを作成して入れるのが一般的

php artisan make:model Models/Test
//一般的

php artisan make:model Models/Test -mc
//マイグレーションファイル、コントローラーファイルをまとめて作る -mc


マイグレーション
DBテーブルの履歴管理
新しいテーブル作成やカラム追加、削除などの履歴

php artisan make:migration create_tests_table 複数形 接続しているデータベースにlaravel_taskにtestテーブル作成
php artisan migrationで作成
php artisan migrate:fresh または refresh

モデルは単数系 マイグレーションは複数形
Person->people

database/migration/にマイグレーションファイルが作成される
ex
$table->string("text",100); 接続しているデータベースにlaravel_taskにtestテーブルがあり、そこにtextカラムを作成


tinker (DB簡易接続)
データベースと簡易接続する仕組み
php artisan tinkerで起動

$test = new App\Models\test;
// モデルをインスタンス化

$test->text = "aaa";
//先ほど作ったtextカラムに文字列aaaを追加

$test->save();
//保存する

App\Models\Test::all();
//Testに入っているデータを全て表示


コントローラー(処理)
app/Http/Controllers/

php artisan make:controller TestController
ファイル名にControllerとつけるのがわかりやすく一般的

laravelはMVCモデルを採用 クライアントからルーティングを通って、コントローラーに処理を行い、結果をビューで返す
実際の処理を書くコントローラー


ヘルパ関数
phpの関数とは別 laravelが用意している便利な関数
route, auth, app, bcrypt
collect, dd, env, factory, old, viewなど

laravelのドキュメント参照

dd $valuesの中身を確認するために使用controllerで使用
view viewファイルを表示するためにcontrollerで使用

auth 認証
bcrypt パスワードの暗号化
collect コレクション型のデータ作成時に使用
factory ダミーデータ作成
