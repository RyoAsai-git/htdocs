laravel 

ローカルサーバー起動
    php artisan serve 
    http:127.0.0.1:8000


タイムゾーン設定 言語設定
    config/app.php
    'timezone' => 'Asia/Tokyo';
    'locale' => 'ja';


DB文字コード設定
    config/database.php
    'charset' => 'utf8';
    'collation' => 'utf8_unicode_ci'


デバックバーのインストール
    composer require barryvdh/laravel-debugbar
    php artisan serveで確認
    .envのDEBUGで切り替える
    laravel デバッガー常時起動状態になっている
    .envファイルでAPP_DEBUG=true をAPP_DEBUG=falseに変更で消える

    デバッガーをtrueに変更しても表示されない場合はキャッシュとコンフィグをクリアすると良い
    php artisan cache:clear
    php artisan config:clear


データベース設定
    .envのここを変更
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=laravel
    DB_USERNAME=root
    DB_PASSWORD=

    phpMyAdminでデータベースを作成し、privilegesでユーザーを作成する ユーザー名、パスワード設定
    DB_DATABASEにデータベース名
    DB_USERNAMEにprivilegesで作成したユーザー名
    DB_PASSWORDにprivilegesで作成したユーザーのパスワード

    接続確認方法
    laravelにはインストール時にデータベース内のテーブルを作る機能がある
    php artisan migrate
    エラー発生

    .env こちらへ変更
    DB_CONNECTION=mysql
    DB_HOST=localhost
    DB_PORT=3306
    DB_DATABASE=laravel_task
    DB_USERNAME=laravel_user
    DB_PASSWORD=password123

    privilegesで作成したユーザーのホスト名を%からlocalhostへ変更
    .env DB_HOST=127.0.0.1をDB_HOST=localhostへ変更
    config/database.phpの'unix_socket' => 'env('DB_SOCKET', '')', を 'unix_socket' => '/Applications/MAMP/tmp/mysql/mysql.sock',へ変更
    エラー解決
    laravelとデータベースの接続完了


laravel ルート ビュー
    laravel
    ルーティング
    コントローラー
    モデル <-> データベース
    ビュー

    laravelのトップページ(welcome)はクライアントからのリクエストにルーティングー>ビューと表示している
    今回はコントローラーを経由していない


Artisan(職人)
    php artisan list コマンド一覧

    よく使う？
    make:migration
    make:model
    make:controller

    コマンドを拡張して自分で作ることもできる


laravel モデル
    データベースとのやりとりをphpで記述できるメリット 
    Eloquentという名称
    ORM ORマッパーという機能
    Object-Relational Mapping オブジェクト関係マッピング

    モデル作成
    php artisan make:model Test
    //appフォルダの直下にあるため modelが増えるほど見づらくなってしまう
    //Modelsのフォルダを作成して入れるのが一般的

    php artisan make:model Models/Test
    //一般的

    php artisan make:model Models/Test -mc
    //マイグレーションファイル、コントローラーファイルをまとめて作る -mc


マイグレーション
    DBテーブルの履歴管理
    新しいテーブル作成やカラム追加、削除などの履歴

    php artisan make:migration create_tests_table 複数形 接続しているデータベースにlaravel_taskにtestテーブル作成
    php artisan migrationで作成
    php artisan migrate:fresh または refresh

    モデルは単数系 マイグレーションは複数形
    Person->people

    database/migration/にマイグレーションファイルが作成される
    ex
    $table->string("text",100); 接続しているデータベースにlaravel_taskにtestテーブルがあり、そこにtextカラムを作成


tinker (DB簡易接続)
    データベースと簡易接続する仕組み
    php artisan tinkerで起動

    $test = new App\Models\test;
    // モデルをインスタンス化

    $test->text = "aaa";
    //先ほど作ったtextカラムに文字列aaaを追加

    $test->save();
    //保存する

    App\Models\Test::all();
    //Testに入っているデータを全て表示


    コントローラー(処理)
    app/Http/Controllers/

    php artisan make:controller TestController
    ファイル名にControllerとつけるのがわかりやすく一般的

    laravelはMVCモデルを採用 クライアントからルーティングを通って、コントローラーに処理を行い、結果をビューで返す
    実際の処理を書くコントローラー


ヘルパ関数
    phpの関数とは別 laravelが用意している便利な関数
    route, auth, app, bcrypt
    collect, dd, env, factory, old, viewなど

    laravelのドキュメント参照

    dd $valuesの中身を確認するために使用controllerで使用
    view viewファイルを表示するためにcontrollerで使用

    auth 認証
    bcrypt パスワードの暗号化
    collect コレクション型のデータ作成時に使用
    factory ダミーデータ作成


コレクション型
    TestController内でddで表示したもの
    var_dumpで出力するとobject型で表示、collectionと出てくるが見辛い

    配列を拡張したもの laravel独自のもの
    データベースからデータを取って来た際はコレクション型になっている
    コレクション型の専用関数多数
    メソッドチェーンで記述可能

    all, chunk, get, pluck, whereln, toArray

    $collection = collection([1, 2, 3]);
    ヘルパ関数collectionでコレクションは作成できる

    all 全取得
        collect([1, 2, 3])->all(); //[1, 2, 3]

    chunk ひとまとまりにして取得 
    toArray 配列で取得
        $collection = collect([1, 2, 3, 4, 5, 6, 7]);
        $chunks = $collection->chunk(4);
        $chunks->toArray();
        // [[1, 2, 3, 4], [5, 6, 7]]  4つごとに区切る関数

    get 取得
    pluck 抜き取る
    whereln 条件指定

    count アイテム数を返す
        $collection = collect[(1, 2, 3, 4)];
        $collection->count();
        // 


クエリビルダ
    データベースへアクセスする際にSQLで書くべきものをphpで書けるようにしたもの
    SQLインジェクションから守ることが可能 PDOの手順を踏まなくてもセキュアな状態で操作ができる

    Select where groupByなど

    DB::table(テーブル名)->と繋ぐ

    簡単にデータを取ってくるにはコレクション型の方が良い 関数がたくさんあるため
    条件が細かくなって来たらクエリビルダを使うと良い 細かい条件指定が可能
    それでも厳しいならrawメソッドでSQLを直接使用
    ただしrawメソッドはSQLインジェクションの可能性もあるので、注意    ユーザーからの入力がなければ良いが


Facade（正面入口）
    複雑な関連を持つクラス群を簡単に利用するための窓口を用意するデザインパターン
    アクセスする場所を1つにし、そこにアクセスしたら様々なシステムがあり、それを利用できる仕組み

    Facadeクラス
    laravelが最初に用意しているもの

    Auth Blade DB 
    File ファイル設定
    Hash パスワード
    Route ルーティング

    app/config/app.php内でfacadeの設定
    'provider'と'aliases'の箇所でfacadeとして定義さreている

    use Illuminate\Support\Facade\DB の DBの箇所を変えることで他のFacadeにアクセスできる

    ちなみにIlluminate\Support\Facadeはどこかというと
    composerでインストールされているもの 
    vender/laravel/framework/src/Illuminateの中にSupport
    Support内にFacade
    Facade内にDB
    これらを引っ張って来て使っている

    自分でFacadeを作って呼び出すこともできる


laravel起動処理とDIコンテナ
    DI 外部でインスタンス化して注入
    サービスコンテナ DIをまとめて担う

    public/index.phpが一番最初にアクセスされるページ
    エントリポイントと呼ぶ
    オートロードファイルの読み込み
    フレームワークの起動
    アプリケーションの実行
    HTTPレスポンスの送信
    終了処理

    DI クラスの内部でインスタンス化せずに、外部で用意して注入すること
    細かく見ると難しい


Blade
    laravelで組み込まれたテンプレートエンジン
    {{}}でエスケープ処理して実行
    ＠csrfでcsrf対策
    @foreach @endforeachで配列表示
    @section @yieldなどでテンプレート読み込み

    bladeビューにはblade.phpをつける resource/view内に配置

    @if @endif
    @auth @endauth ログイン機能
    @構文でブレード構文

    {{}}はXSS攻撃を防ぐため、自動的にhtmlspecialchars関数がかかる
    セキュリティ対策

    ex
    @foreach($values as $value)
    {{$value->id}}<br>
    {{$value->text}}<br>
    @endforeach

    レイアウト定義 ドキュメントに詳細あり
    レイアウトを分割できる
    resources/views/layouts/app.blade.phpとしてマスターのレイアウトを保存
    ファイル内で
    @section @yieldを用いて入り込むレイアウトを読み込みつつ

    読み込むファイルは
    resources/views/child.blade.phpとして保存
    @extends('')で親のビューファイルを読み込むことができる

    php requireで持って来ていた 
    bladeはblade構文を使って、セキュリティを満たした上で作成ができる

    ビューとコントローラー、モデルの処理が分割される
    ビューは表示だけに専念できる
    コントローラーは処理に専念できる


フロントエンド
    ニーズ
    クライアント 使いやすい 表示が早い
    開発側      作りやすい 管理しやすい

    フロントエンドはカオスな状態
    HTML pug
    CSS sass bootstrap
    JavaScript Vue.js Reactなど
    
    フロントエンドエンド必須ツール
    node.js npm
    webpack
    BABEL
    Loader

    カオスな状態をコンパイルして昔の書き方に戻して表示する
    バンドル webpackを用いてまとめる

    管理するのがnode.js npm

    laravelでも設定必要
    laravel-ui
    laravel-mix  webpackのパッカー
    webpack.mix.js laravelーmixの設定ファイル laravelに既に存在
        webpack.mix.jsの中身
        バンドラーでまとめる
        mix.js('resources/js/app.js', 'public/js')
        // resources/js/app.js を public/jsにまとめる
        .sass('resources/sass/app.scss', 'public/css');
        // app.scssをcssに書き直す

    Node.js/npm 別途インストール
    フロントエンド開発には必須
    package.json / package.lock 設定管理ファイル
        既にlaravelに存在
        devDependenciesの記述以下にフロントエンドでインストールしようとしているファイル

    composerにはcomposer.jsonという管理ファイルがあったが、上はそれのnpmバージョン


laravel-ui
    laravel user interface
    laravel 6.0からフロントエンド側が分離

    マニュアルのJavaScriptとCSS scaffoldの項目参照

    composer require laravel/ui:^1.0 --dev

    インストール完了後、フロントエンドのscaffoldをインストールする
    php artisan ui bootstrap
    php artisan ui vue
    php artisan ui react
    から選ぶ

    ログイン/ユーザー登録機能のscaffoldを作成
    php artisan ui bootstrap --auth
    php artisan ui vue --auth
    php artisan ui react --auth

    ......

    最後にnpm run devを行うとresources内にjs sassフォルダが作成される
    この中身がpublic/css public/jsにコンパイルされまとめれている

    仮にJSを変えてうまくいかないときにはきちんとコンパイルされpublicに記述されているか確認しても良い


npm run watch
    フロント側に変更があった際に、逐一npm run devを記述するのは手間
    フロント側のファイルに変更があれば、自動的にコンパイルしてくれるのがwatch

    使用するにはコンソールを常に開く必要
    php artisan serveで仮想サーバーを開く
    npm run watchでフロントで変更がないかを監視

    変更があればpublicに反映される


エラーメッセージの日本語化
    phpの場合は用意していた
    laravelは用意されている resources/lang/en/内に存在

    gitからlaravel-resources-lang-jaをコピー

    エラーメッセージのattributeは変更可能
    attribute -> []

    config/app.phpの'locale'がjaだとresources/lang/jaが適用される

    エラーメッセージ
    passwordには8文字以上の文字列を指定してください。
    passwordが英語のため

    'attributes' => [
        'password' => 'パスワード',
    ],

    パスワードには8文字以上の文字列を指定してください。へ変更される


php artisan route:list
    ルーティング一覧表示
    内容が多すぎる

    php artisan route:list > route:txt
    ファイル化

    App\Http\Controllers\Auth...
    ログイン関連はここへ飛ぶ

    HTTP/Controllers/Authフォルダ内に処理がそれぞれ存在する

    routes/web.php

    Auth::routes();
    //この一文でAuthフォルダへのルーティングを実現
    これを消すと、route:listからも消える


管理画面 マルチログイン機能
    https://coinbaby8.com/laravel-multi-login-html参照
    laravel 5.5で作成したものだが、現在でも使える

    記事内のphp artisan make:authでは認証が作れていたが
    laravel 6以降では php artisan ui bootstrap --authで作る

    ファイルを10個ほど作ることで実現できる

    create_admins_table.php (マイグレーション)
    Admin.php (モデル)
    config/auth.php (認証設定ファイル)
    app/Exceptions/Handler.php (ログインしてない時の挙動)
    route/web.php (ルーティング)
    HomeController.php (コントローラー)
    LoginController.php (コントローラー)
    views/admin/login.blade.php (ビュー)
    views/admin/home.blade.php (ビュー)
    views/layout/app_admin.blade.php (ビュー(レイアウト))


データベースは大文字区別できない
    マイグレート時注意

符号なしINTカラム
    $table->unsignedInteger();
    符号なしとは+,-と言った符号がつかず、プラスのみのもの
     
    実際にリレーションを組むときに片方が＋、片方がーだけだとリレーションがうまくいかない
    後ほど解説

    後からつけるカラム修飾子としても使える

マイグレーション
    テーブルの履歴管理
    後から一個追加、削除など可能
    オプションで操作できる
    --createなど

    ex タイトルカラムを追加する
        php artisan make:migration add_title_to_contact_forms_table --table=contact_forms

    ex your_nameの後に追加
        $table->string('title', 50)->after('your_name');

        php artisan migrateで反映

    ex 追加したものを消したい場合は
        dropColumnを記述すると削除できる

        マイグレーションファイルのpublic function down内に記述
        $table->dropColumn('title');

    コマンド
        php artisan migrate:status 
        マイグレーションファイルの確認

        php artisan migrate:rollback 
        マイグレーションファイルのrollback 一つ前のマイグレーションファイルをデータベース反映前に戻す
        public function down内に記述がないとうまくロールバックされないことがある

        php artisan migrate:rollback --step=2
        stepでマイグレーションファイルをどこまで戻すか指定できる
        マイグレーションファイル

RESTful
    laravel リソースルートはCRUDのルートをコントローラーへ割り当てる
    マニュアル参照
    RESTの原則に沿って構築されたWebシステムのHTTPでの呼び出しインターフェースのこと

    php artisan make:controller ContactFormController --resource
    リソースコントローラーにより処理されるアクション
    URI                         アクション
    /contacts                   index
    /contacts/create            create
    /contacts                   store
    /contacts/{contact}         show
    /contacts/{contact}/edit    edit
    /contacts/{contact}         update
    /contacts/{contact}         destroy

    アクションに対してURIがあらかじめ決まっている仕組み REST

    部分的なリソースルート作成で例えばindex,createのみ作成すると言ったことも可能
        Route::resource('contacts', 'ContactFormController')->only([
            'index', 'show'
        ])

        onlyをなくすと
        Route::resource('contacts', 'ContactFormController');
        全てのアクションが生成される


ルートグループ
    Route::group(['prefix' => 'contact', 'middleware' => 'auth'], function(){
        Route::get('index', 'ContactFormController@index');
    });

    ->nameで名前をつけることができる
        view側の記述が楽になる できるだけつけるように
    ->name('contact.index');

    php artisan route:listで確認


部分テンプレート
    @extends 読み込み
    @extends('layout.app')


app.blade.php
    app.blade.php内
    {{}} これの内部でphpの処理が記述できる

        configヘルパ関数
        {{ config('app.name', 'Laravel') }}
        configフォルダのapp.nameファイルを持ってきている

        app.name内
        'name' => env('APP_NAME', 'Laravel'),

        .env内
        APP_NAME=Laravel
        Laravelの箇所を変更するとconfigにも適応されてタイトルが変更される

    
    {{ asset('js/app.js') }}
    {{ asset('css/app.css') }}

        laravel-mix
        webpack.mix.jsで設定した
        mix.js('resources/js/app.js', 'public/js')
            .sass('resources/sass/app.scss', 'public/css');

        publicフォルダのjs, cssが表示されている

    main 
    @yield('content')
        この中に作成したloginやregisterファイルはここから読み込まれている

    <a class="navbar-brand" href="{{ url('/') }}"> 
        {{ url('/') }} ルートに飛ぶというリンク設定

    @guest
        bladeのディレクティブという仕組み
        認証ディレクティブ

        @auth
            // ユーザーは認証済み
        @endauth

        @guest
            //ユーザーは認証されていない
        @endguest

    ここでは@guestできたら{{ route('login') }} {{ route('register') }}
    login画面、register画面を押せるような仕組みになっている
    routeというヘルパ関数

    {{ route('') }}  この内部にname->でつけた名前を設定できる
    {{ route('contact.index') }}と記述したらcontactフォルダのindexファイルが表示される

    @guest
    @else
        //ログインしていた状態の処理
         {{ Auth::user()->name }} ユーザーの名前を持ってくる

         {{ __('login') }}
         {{ __('register') }}

         Localization 現地化 他言語対応

    フォーム作成箇所では必ずCSRF対策
    laravelでは@csrf
    入れないとエラー

    @yield('content')
        login.blade.php内に
        @section('content')
        ('')の中身があっていれば表示される

        つまり app.blade.php内
        <main>
            @yield('content')
        </main>
        ここのmainの中にlogin.blade.phpなどが入ってくる
        @section @endsectionで区切った内容が表示


login.blade.php
    <div class="container">
        コンテナ設定
    <div class="row justify-content-center">
        //rowと書いてあげることでレスポンシブルが対応
        //centerで真ん中に配置
        <div class="col-md-8">
            12分割した内の8を使う 

    cardsカード型のデザイン
        bootstrapのマニュアル内にある
        最近よく見るデザイン

        <div class="card-header">{{ __('Login') }}でloginフォームのLoginの文字表示

    @errorエラー表示
        バリデーション


formファサード
    以前はインストール済みだった
    今はcomposerで追加インストール必要


destroy機能
    本当に削除するのか非表示にするのかはアプリ開発時に考えるべき


ファットコントローラー
    コントローラーに処理が集まること
    できるだけ避ける スリムにする

    ex 
    コントローラー内でshowアクションをスリム化するために
    App/Servicesを作り CheckForm.php